use util::*;
use ast::syntax::*;
use crate::token::Token;
use crate::error::LexError;

use ty::syntax::*;

grammar;
extern {
    type Location = usize;
    type Error = LexError;

    enum Token {
        "(" => Token::LPar,
        ")" => Token::RPar,
        "not" => Token::Not,
        Bool => Token::Bool(<bool>),
        Int => Token::Int(<i32>),
        Float => Token::Float(<f32>),
        "-" => Token::Minus,
        "+" => Token::Plus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "-." => Token::MinusDot,
        "+." => Token::PlusDot,
        "*." => Token::StarDot,
        "/." => Token::SlashDot,
        "=" => Token::Equal,
        "<>" => Token::LessGreater,
        "<=" => Token::LessEqual,
        ">=" => Token::GreaterEqual,
        "<" => Token::Less,
        ">" => Token::Greater,
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "let" => Token::Let,
        "in" => Token::In,
        "rec" => Token::Rec,
        "," => Token::Comma,
        ArrayCreate => Token::ArrayMake,
        "." => Token::Dot,
        "<-" => Token::LessMinus,
        ";" => Token::SemiColon,
        Ident => Token::Ident(<String>)
    }
}

// # operator priority (descending order)
// : atom
// : array get
// : function application (left assoc)
// : - -. (prefix)
// : * / *. /. (left assoc)
// : + - +. - (left assoc)
// : = < (left assoc?)
// : <- (left assoc)
// : if 
// : ; (right assoc)
// : let , let rec

LetDecl: LetKind = {
    <x:Ident> "=" <e1:Expr> "in" <e2:Expr> => LetKind::Let(Decl::new(x, Ty::new_var()), e1, e2),
    "(" <e1:Pat> ")" "=" <e2:Expr> "in" <e3:Expr> => LetKind::LetTuple(e1, e2, e3),
    "rec" <f:Fun> "in" <cont:Expr> => LetKind::LetRec(f, cont),
};

Elems: Vec<Expr> = {
    <mut v:Elems> "," <e2:Expr> => {
        v.push(*e2);
        v
    },
    <e1:Expr> "," <e2:Expr> => vec![*e1, *e2]
};
Pat: Vec<Decl> = {
    <mut p:Pat> "," <x:Ident> => {
        p.push(Decl::new(x, Ty::new_var()));
        p
    },
    <x:Ident> "," <y:Ident> => vec![Decl::new(x, Ty::new_var()), Decl::new(y, Ty::new_var())],
};

Fun : Fundef = {
    <n:Ident> <args:FormalArgs> "=" <body:Expr> => 
        Fundef {
            fvar: Decl::new(n, Ty::new_var()),
            args: args,
            body: body,
        },
};
ActualArgs: Vec<Expr> = {
    <mut v:ActualArgs> <e:SimpleExpr> => {
        v.push(*e);
        v
    },
    SimpleExpr => vec![*<>],
};
FormalArgs : Vec<Decl> = {
    <mut v:FormalArgs> <a:IdArgs> => {
        v.push(Decl::new(a, Ty::new_var()));
        v
    },
    <a:IdArgs> => vec![Decl::new(a, Ty::new_var())],
};

TermOp : BinOpKind = {
    "+." => BinOpKind::FAdd,
    "-." => BinOpKind::FSub,
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub
};
FactorOp : BinOpKind = {
    "*." => BinOpKind::FMul,
    "/." => BinOpKind::FDiv,
    "*" => BinOpKind::Mul,
    "/" => BinOpKind::Div
};

IdArgs: Id = {
    Ident => <>,
    "(" ")" => id::gen_uniq()
};

Literal: Box<Expr> = {
    <l:@L> "(" ")" <r:@R> => Box::new(Spanned::new(ExprKind::Const(ConstKind::CUnit), (l, r))),
    <l:@L> <d:Int> <r:@R> => Box::new(Spanned::new(ExprKind::Const(d.into()), (l, r))),
    <l:@L> <f:Float> <r:@R> => Box::new(Spanned::new(ExprKind::Const(f.into()), (l, r))),
    <l:@L> <b:Bool> <r:@R> => Box::new(Spanned::new(ExprKind::Const(b.into()), (l, r)))
}

SimpleExpr: Box<Expr> = {
    "(" <e:Expr> ")" => e,
    Literal,
    <l:@L> <x:Ident> <r:@R> => Box::new(Spanned::new(ExprKind::Var(x), (l, r))),
    <l:@L> "(" <e1:Elems> ")" <r:@R> => Box::new(Spanned::new(ExprKind::Tuple(e1), (l, r))),
    // Array Get
    <l:@L> <e1:SimpleExpr> "." "(" <e2:Expr> ")" <r:@R> => Box::new(Spanned::new(ExprKind::Get(e1, e2), (l, r))),
};

SubExpr: Box<Expr> = {
    #[precedence(level="0")]
    SimpleExpr,

    // Array Create
    #[precedence(level="1")]
    <l:@L> ArrayCreate <e1:SimpleExpr> <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::Array(e1, e2), (l, r))),
    // App
    <l:@L> <e:SimpleExpr> <args:ActualArgs> <r:@R> => Box::new(Spanned::new(ExprKind::App(e, args), (l, r))),

    // unary - -. not
    #[precedence(level="2")]
    <l:@L> "-." <e:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::UnOp(UnOpKind::FNeg, e), (l, r))),
    <l:@L> "-" <e:SubExpr> <r:@R> => {
        match &e.item {
            ExprKind::Const(c) => {
                match c {
                    ConstKind::CFloat(f) => Box::new(Spanned::new(ExprKind::Const((-f).into()), e.loc)),
                    _ => Box::new(Spanned::new(ExprKind::UnOp(UnOpKind::Neg, e), (l, r))),
                }
            },
            _ => Box::new(Spanned::new(ExprKind::UnOp(UnOpKind::Neg, e), (l, r))),
        }
    },
    <l:@L> "not" <e:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::UnOp(UnOpKind::Not, e), (l, r))),

    // * / *. /.
    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> <op:FactorOp> <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::BinOp(op, e1, e2), (l, r))),

    // + -
    #[precedence(level="4")]
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> <op:TermOp> <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::BinOp(op, e1, e2), (l, r))),

    // Comparisons
    #[precedence(level="5")]
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> "=" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::Eq, e1, e2), (l, r))),
    <l:@L> <e1:SubExpr> "<>" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(
        ExprKind::UnOp(
            UnOpKind::Not,
            Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::Eq, e1, e2), (l, r)))
        ),
        (l, r)
    )),
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> "<=" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::LE, e1, e2), (l, r))),
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> ">=" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::LE, e2, e1), (l, r))),
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> ">" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(
        ExprKind::UnOp(
            UnOpKind::Not,
            Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::LE, e1, e2), (l, r)))
        ),
        (l, r)
    )),
    #[assoc(side="left")]
    <l:@L> <e1:SubExpr> "<" <e2:SubExpr> <r:@R> => Box::new(Spanned::new(
        ExprKind::UnOp(
            UnOpKind::Not,
            Box::new(Spanned::new(ExprKind::BinOp(BinOpKind::LE, e2, e1), (l, r)))
        ),
        (l, r)
    )),

    // Array Put
    #[precedence(level="6")]
    <l:@L> <e1:SimpleExpr> "." "(" <e2:Expr> ")" "<-" <e3:NoLet> <r:@R> => Box::new(Spanned::new(ExprKind::Put(e1, e2, e3), (l, r))),
}

NoLet: Box<Expr> = {
    #[precedence(level="0")]
    SubExpr,

    // If
    #[precedence(level="1")]
    <l:@L> "if" <e1:Expr> "then" <e2:Expr> "else" <e3:NoLet> <r:@R> => Box::new(Spanned::new(ExprKind::If(e1, e2, e3), (l, r))),
}

Let: Box<Expr> = {
    // Let
    #[precedence(level="3")]
    <l:@L> "let" <e:LetDecl> <r:@R> => Box::new(Spanned::new(ExprKind::Let(e), (l, r))),
    // if ... then ... else let ...
    // 系の優先順位を確定するための ad-hoc
    <l1:@L> "if" <e1:Expr> "then" <e2:Expr> "else" <l2:@L> "let" <e3:LetDecl> <r2:@R> <r1:@R> => Box::new(Spanned::new(
        ExprKind::If(e1, e2, Box::new(Spanned::new(ExprKind::Let(e3), (l2, r2)))),
        (l1, r1)
    )),
    NoLet
}

SeqSub: Box<Expr> = {
    <l:@L> <e1:SeqSub> ";" <e2:NoLet> <r:@R> => Box::new(Spanned::new(
        ExprKind::Let(LetKind::Let(Decl::gen_uniq(Ty::Unit), e1, e2)),
        (l, r)
    )),
    NoLet
}

pub Expr: Box<Expr> = {
    // Sequence
    <l:@L> <e1:SeqSub> ";" <e2:Let> <r:@R> => Box::new(Spanned::new(
        ExprKind::Let(LetKind::Let(Decl::gen_uniq(Ty::Unit), e1, e2)),
        (l, r)
    )),
    Let
}